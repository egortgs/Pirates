//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""efb2c5aa-0ee2-4ca6-9114-d0210788719d"",
            ""actions"": [
                {
                    ""name"": ""ShootRight"",
                    ""type"": ""Value"",
                    ""id"": ""6b8fc929-fbc5-4f4b-88cb-528b86bddce1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootLeft"",
                    ""type"": ""Value"",
                    ""id"": ""331776a7-43f4-4683-86ea-0efde19d3ba4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""99a6da5c-6501-4deb-b5dc-54826b21d5b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveForward2"",
                    ""type"": ""Value"",
                    ""id"": ""ca108d6e-8fcc-4b6a-a373-50f383e56ac0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""2b37cb6d-6632-4a9b-b0a9-e45f497343e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Value"",
                    ""id"": ""e9747451-e85a-4169-a7ff-6980018f7789"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""1292d19e-4e87-4b51-928a-6d389b730b90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MortairRotateX"",
                    ""type"": ""Value"",
                    ""id"": ""2aa3247d-027f-449b-ab01-11dd76d71a04"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MortairRotateY"",
                    ""type"": ""Value"",
                    ""id"": ""cf9ce694-03ae-4c43-b090-9905e00cb925"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootMortair"",
                    ""type"": ""Value"",
                    ""id"": ""40f4d7b1-d360-49f8-9390-e7f06496fa44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartMortair"",
                    ""type"": ""Value"",
                    ""id"": ""19bf95a7-e3e6-4d85-9d67-04fa8da5e5b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StopMortair"",
                    ""type"": ""Value"",
                    ""id"": ""d4a7f699-5e0b-422e-bcd5-30e8101261ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0e5470c-7e82-40e8-add2-4a7b1abd095b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7db3a2b-cfdc-404b-a4a6-d8d999559940"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75687d43-d92d-40c0-80b7-d83cd7b9d696"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4fc679e-e281-411f-bb88-ebf4ad4ec75a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b61f0c4c-82cd-486c-b7eb-95de2ee8600c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40641d2c-ae50-4c32-8cb1-7a00516cd889"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Buttons"",
                    ""id"": ""f51a7a2f-007d-4f33-8933-532a35a26faa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1044d3bf-1839-4d9a-9910-f628216065f0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b04a030f-ae2b-4c5c-b005-7c510ecb8f60"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e8ee9b93-ac39-4ebb-959b-34774888ac79"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""530ec492-bc67-4f01-b8cf-6c7ddb7269d4"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""548b8e8d-3f77-40e2-bfcd-c064010dda73"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""44403c95-d6b6-494a-836f-dc480745c66e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4c4d2f8c-78c0-4d9d-9953-088e39023325"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""58d56f70-5f2d-4b5d-b744-52a948b8dc5a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MortairRotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""57c8493a-4e57-4bb7-bb74-5626835f93fd"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootMortair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ab1cc59-0705-47e9-bb92-9ca2b6f7c282"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMortair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83182e48-fcf0-4845-a328-0ec9e66f770f"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMortair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_ShootRight = m_Ship.FindAction("ShootRight", throwIfNotFound: true);
        m_Ship_ShootLeft = m_Ship.FindAction("ShootLeft", throwIfNotFound: true);
        m_Ship_MoveForward = m_Ship.FindAction("MoveForward", throwIfNotFound: true);
        m_Ship_MoveForward2 = m_Ship.FindAction("MoveForward2", throwIfNotFound: true);
        m_Ship_Break = m_Ship.FindAction("Break", throwIfNotFound: true);
        m_Ship_Stop = m_Ship.FindAction("Stop", throwIfNotFound: true);
        m_Ship_Rotate = m_Ship.FindAction("Rotate", throwIfNotFound: true);
        m_Ship_MortairRotateX = m_Ship.FindAction("MortairRotateX", throwIfNotFound: true);
        m_Ship_MortairRotateY = m_Ship.FindAction("MortairRotateY", throwIfNotFound: true);
        m_Ship_ShootMortair = m_Ship.FindAction("ShootMortair", throwIfNotFound: true);
        m_Ship_StartMortair = m_Ship.FindAction("StartMortair", throwIfNotFound: true);
        m_Ship_StopMortair = m_Ship.FindAction("StopMortair", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private List<IShipActions> m_ShipActionsCallbackInterfaces = new List<IShipActions>();
    private readonly InputAction m_Ship_ShootRight;
    private readonly InputAction m_Ship_ShootLeft;
    private readonly InputAction m_Ship_MoveForward;
    private readonly InputAction m_Ship_MoveForward2;
    private readonly InputAction m_Ship_Break;
    private readonly InputAction m_Ship_Stop;
    private readonly InputAction m_Ship_Rotate;
    private readonly InputAction m_Ship_MortairRotateX;
    private readonly InputAction m_Ship_MortairRotateY;
    private readonly InputAction m_Ship_ShootMortair;
    private readonly InputAction m_Ship_StartMortair;
    private readonly InputAction m_Ship_StopMortair;
    public struct ShipActions
    {
        private @InputSystem m_Wrapper;
        public ShipActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootRight => m_Wrapper.m_Ship_ShootRight;
        public InputAction @ShootLeft => m_Wrapper.m_Ship_ShootLeft;
        public InputAction @MoveForward => m_Wrapper.m_Ship_MoveForward;
        public InputAction @MoveForward2 => m_Wrapper.m_Ship_MoveForward2;
        public InputAction @Break => m_Wrapper.m_Ship_Break;
        public InputAction @Stop => m_Wrapper.m_Ship_Stop;
        public InputAction @Rotate => m_Wrapper.m_Ship_Rotate;
        public InputAction @MortairRotateX => m_Wrapper.m_Ship_MortairRotateX;
        public InputAction @MortairRotateY => m_Wrapper.m_Ship_MortairRotateY;
        public InputAction @ShootMortair => m_Wrapper.m_Ship_ShootMortair;
        public InputAction @StartMortair => m_Wrapper.m_Ship_StartMortair;
        public InputAction @StopMortair => m_Wrapper.m_Ship_StopMortair;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void AddCallbacks(IShipActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipActionsCallbackInterfaces.Add(instance);
            @ShootRight.started += instance.OnShootRight;
            @ShootRight.performed += instance.OnShootRight;
            @ShootRight.canceled += instance.OnShootRight;
            @ShootLeft.started += instance.OnShootLeft;
            @ShootLeft.performed += instance.OnShootLeft;
            @ShootLeft.canceled += instance.OnShootLeft;
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @MoveForward2.started += instance.OnMoveForward2;
            @MoveForward2.performed += instance.OnMoveForward2;
            @MoveForward2.canceled += instance.OnMoveForward2;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
            @Stop.started += instance.OnStop;
            @Stop.performed += instance.OnStop;
            @Stop.canceled += instance.OnStop;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @MortairRotateX.started += instance.OnMortairRotateX;
            @MortairRotateX.performed += instance.OnMortairRotateX;
            @MortairRotateX.canceled += instance.OnMortairRotateX;
            @MortairRotateY.started += instance.OnMortairRotateY;
            @MortairRotateY.performed += instance.OnMortairRotateY;
            @MortairRotateY.canceled += instance.OnMortairRotateY;
            @ShootMortair.started += instance.OnShootMortair;
            @ShootMortair.performed += instance.OnShootMortair;
            @ShootMortair.canceled += instance.OnShootMortair;
            @StartMortair.started += instance.OnStartMortair;
            @StartMortair.performed += instance.OnStartMortair;
            @StartMortair.canceled += instance.OnStartMortair;
            @StopMortair.started += instance.OnStopMortair;
            @StopMortair.performed += instance.OnStopMortair;
            @StopMortair.canceled += instance.OnStopMortair;
        }

        private void UnregisterCallbacks(IShipActions instance)
        {
            @ShootRight.started -= instance.OnShootRight;
            @ShootRight.performed -= instance.OnShootRight;
            @ShootRight.canceled -= instance.OnShootRight;
            @ShootLeft.started -= instance.OnShootLeft;
            @ShootLeft.performed -= instance.OnShootLeft;
            @ShootLeft.canceled -= instance.OnShootLeft;
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @MoveForward2.started -= instance.OnMoveForward2;
            @MoveForward2.performed -= instance.OnMoveForward2;
            @MoveForward2.canceled -= instance.OnMoveForward2;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
            @Stop.started -= instance.OnStop;
            @Stop.performed -= instance.OnStop;
            @Stop.canceled -= instance.OnStop;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @MortairRotateX.started -= instance.OnMortairRotateX;
            @MortairRotateX.performed -= instance.OnMortairRotateX;
            @MortairRotateX.canceled -= instance.OnMortairRotateX;
            @MortairRotateY.started -= instance.OnMortairRotateY;
            @MortairRotateY.performed -= instance.OnMortairRotateY;
            @MortairRotateY.canceled -= instance.OnMortairRotateY;
            @ShootMortair.started -= instance.OnShootMortair;
            @ShootMortair.performed -= instance.OnShootMortair;
            @ShootMortair.canceled -= instance.OnShootMortair;
            @StartMortair.started -= instance.OnStartMortair;
            @StartMortair.performed -= instance.OnStartMortair;
            @StartMortair.canceled -= instance.OnStartMortair;
            @StopMortair.started -= instance.OnStopMortair;
            @StopMortair.performed -= instance.OnStopMortair;
            @StopMortair.canceled -= instance.OnStopMortair;
        }

        public void RemoveCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface IShipActions
    {
        void OnShootRight(InputAction.CallbackContext context);
        void OnShootLeft(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMoveForward2(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMortairRotateX(InputAction.CallbackContext context);
        void OnMortairRotateY(InputAction.CallbackContext context);
        void OnShootMortair(InputAction.CallbackContext context);
        void OnStartMortair(InputAction.CallbackContext context);
        void OnStopMortair(InputAction.CallbackContext context);
    }
}
